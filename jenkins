pipeline {
    agent any

    environment {
        # --- DOCKERHUB LOGIN DETAILS ---
        DOCKERHUB_USERNAME = "saurav3198"
        DOCKERHUB_PASSWORD = "S@urav3198"

        # --- AWS ACCESS DETAILS ---
        AWS_ACCESS_KEY_ID = ""  // Add via Jenkins credentials ideally
        AWS_SECRET_ACCESS_KEY = ""
        AWS_DEFAULT_REGION = "ap-south-1"

        # --- DOCKER IMAGES ---
        BACKEND_IMAGE = "saurav3198/spring-backend:v1"
        FRONTEND_IMAGE = "saurav3198/angular-frontend:v1"

        KUBECONFIG = "/var/lib/jenkins/.kube/config"
        PATH = "/usr/local/bin:/usr/bin:/bin:$PATH"
    }

    stages {

        stage('Git Clone') {
            steps {
                echo "📦 Cloning Repository..."
                git branch: 'main', url: 'https://github.com/BagadeSaurav/placement-project.git'
            }
        }

        stage('SonarQube Code Analysis') {
            environment {
                SONARQUBE = credentials('sonarqube-token') // Jenkins Secret Text credential
            }
            steps {
                echo "🔍 Running SonarQube Code Analysis..."
                withSonarQubeEnv('SonarQube') {
                    
                    // --- Backend Analysis ---
                    dir('spring-backend') {
                        sh '''
                        echo "📦 Running SonarQube analysis for Spring Backend..."
                        mvn clean verify sonar:sonar \
                            -Dsonar.projectKey=placement-backend \
                            -Dsonar.host.url=$SONAR_HOST_URL \
                            -Dsonar.login=$SONARQUBE
                        '''
                    }

                    // --- Frontend Analysis ---
                    dir('angular-frontend') {
                        sh '''
                        echo "🎨 Running SonarQube analysis for Angular Frontend..."
                        if ! command -v sonar-scanner >/dev/null 2>&1; then
                            echo "📦 Installing Sonar Scanner CLI..."
                            npm install -g sonar-scanner
                        fi

                        sonar-scanner \
                            -Dsonar.projectKey=placement-frontend \
                            -Dsonar.sources=src \
                            -Dsonar.host.url=$SONAR_HOST_URL \
                            -Dsonar.login=$SONARQUBE
                        '''
                    }
                }
            }
        }

        stage('Configure AWS CLI') {
            steps {
                sh '''
                set -e
                echo "⚙️ Configuring AWS CLI..."
                mkdir -p ~/.aws
                cat > ~/.aws/credentials <<EOF
[default]
aws_access_key_id=${AWS_ACCESS_KEY_ID}
aws_secret_access_key=${AWS_SECRET_ACCESS_KEY}
EOF

                cat > ~/.aws/config <<EOF
[default]
region=${AWS_DEFAULT_REGION}
EOF

                echo "✅ AWS CLI configured successfully."
                '''
            }
        }

        stage('Check AWS & EKS Access') {
            steps {
                sh '''
                set -e
                echo "🔍 Validating AWS and EKS access..."
                aws sts get-caller-identity
                aws eks update-kubeconfig --region ${AWS_DEFAULT_REGION} --name cluster
                kubectl get nodes
                echo "✅ AWS and Kubernetes pre-check successful!"
                '''
            }
        }

        stage('Build & Push Backend Docker') {
            steps {
                dir('spring-backend') {
                    sh '''
                    set -e
                    echo "🐳 Building backend Docker image..."
                    docker build -t $BACKEND_IMAGE .
                    echo $DOCKERHUB_PASSWORD | docker login -u $DOCKERHUB_USERNAME --password-stdin
                    docker push $BACKEND_IMAGE
                    docker logout
                    echo "✅ Backend image pushed successfully!"
                    '''
                }
            }
        }

        stage('Build & Push Frontend Docker') {
            steps {
                dir('angular-frontend') {
                    sh '''
                    set -e
                    echo "🐳 Building frontend Docker image..."
                    docker build -t $FRONTEND_IMAGE .
                    echo $DOCKERHUB_PASSWORD | docker login -u $DOCKERHUB_USERNAME --password-stdin
                    docker push $FRONTEND_IMAGE
                    docker logout
                    echo "✅ Frontend image pushed successfully!"
                    '''
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                dir('kubernetes') {
                    sh '''
                    set -e
                    echo "🚀 Starting Kubernetes deployment..."

                    echo "➡️ Applying Backend Pod..."
                    kubectl apply -f backend-pod.yml --kubeconfig=$KUBECONFIG
                    kubectl get pods --kubeconfig=$KUBECONFIG

                    echo "➡️ Applying Backend Service..."
                    kubectl apply -f backend-svc.yml --kubeconfig=$KUBECONFIG
                    kubectl get svc --kubeconfig=$KUBECONFIG

                    echo "➡️ Applying Frontend Deployment..."
                    kubectl apply -f frontend-dep.yml --kubeconfig=$KUBECONFIG
                    kubectl get pods --kubeconfig=$KUBECONFIG

                    echo "➡️ Applying Frontend Service..."
                    kubectl apply -f frontend-svc.yml --kubeconfig=$KUBECONFIG
                    kubectl get svc --kubeconfig=$KUBECONFIG

                    echo "✅ Kubernetes deployment completed successfully!"
                    '''
                }
            }
        }

        stage('Verify Services') {
            steps {
                sh '''
                echo "🔍 Verifying deployed services..."
                kubectl get pods,svc --kubeconfig=$KUBECONFIG
                echo "✅ All services verified successfully!"
                '''
            }
        }
    }

    post {
        success {
            echo "🎉 Pipeline completed successfully!"
        }
        failure {
            echo "❌ Pipeline failed! Check console logs for details."
        }
    }
}
